import { describe, test, expect } from '@jest/globals';
import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

// Get directory paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

/**
 * Timing-based CLI tester for interactive prompts
 * This approach is more reliable than prompt detection
 */
function testCLITiming({ command, args = [], inputs = [], cwd, timeout = 60000, debug = false }) {
  return new Promise((resolve, reject) => {
    let stdout = '';
    let stderr = '';
    let allDone = false;

    if (debug) {
      console.log(`[SETUP] Testing with ${inputs.length} predefined inputs`);
      console.log(`[SETUP] Inputs: ${inputs.map(i => i || '<ENTER>').join(', ')}`);
    }

    // Start the process
    const proc = spawn(command, args, {
      cwd: cwd || rootDir,
      stdio: ['pipe', 'pipe', 'pipe']
    });

    // Collect stdout
    proc.stdout.on('data', data => {
      const text = data.toString();
      stdout += text;
      if (debug) console.log(`[OUTPUT] ${text}`);
    });

    // Collect stderr
    proc.stderr.on('data', data => {
      const text = data.toString();
      stderr += text;
      if (debug) console.error(`[ERROR] ${text}`);
    });

    // Handle completion
    proc.on('close', code => {
      allDone = true;
      // Only log if we're still in the active part of the test
      if (debug && !timeoutId._destroyed) {
        console.log(`[DONE] Process exited with code ${code}`);
      }
      resolve({ stdout, stderr, code });
    });

    // Handle errors
    proc.on('error', err => {
      reject(err);
    });

    // Send inputs with fixed timing instead of trying to detect prompts
    const sendInputsWithTiming = async () => {
      // Wait for process to start
      await new Promise(resolve => setTimeout(resolve, 500));

      for (let i = 0; i < inputs.length; i++) {
        if (allDone) break;

        // Send the input
        const input = inputs[i] || '';
        if (debug) console.log(`[INPUT] Sending "${input || '<ENTER>'}" (#${i + 1}/${inputs.length})`);
        proc.stdin.write(input + '\n');

        // Wait between inputs
        const delay = 500;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    };

    // Start sending inputs
    sendInputsWithTiming().catch(err => {
      console.error('[ERROR] Failed to send inputs:', err);
    });

    // Overall timeout protection
    const timeoutId = setTimeout(() => {
      if (!allDone) {
        proc.kill();
        reject(new Error(`Process timed out after ${timeout}ms`));
      }
    }, timeout);

    // Clean up on completion
    proc.on('close', () => {
      clearTimeout(timeoutId);
      allDone = true;
    });
  });
}

describe('{{title}} CLI Features', () => {
  // Test ANSI color rendering in terminal output
  test('Terminal output uses ANSI colors correctly', async () => {
    // Interactive mode with color output
    const interactiveInputs = [
      'configure',     // Select configure option
      'Color Test'     // Name input
    ];

    const result = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs')],
      inputs: interactiveInputs,
      timeout: 10000,
      debug: false
    });

    // Verify colored output with ANSI escape sequences
    expect(result.stdout).toMatch(/\u001b\[3\dm/); // Match any ANSI color code
    expect(result.stdout).toMatch(/\u001b\[32m/);  // Match green color code (used for title)
    expect(result.stdout).toMatch(/\u001b\[34m/);  // Match blue color code (used for hello message)

    // Verify specific content was displayed
    expect(result.stdout).toContain('Hello, Color Test!');
    expect(result.stdout).toContain('Thank you for using {{title}}');
  });

  // Test command line arguments parsing
  test('Command line arguments work correctly', async () => {
    // Test with the version flag
    const versionResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs'), '--version'],
      inputs: [],
      timeout: 5000,
      debug: false
    });

    // Verify version output
    expect(versionResult.code).toBe(0);
    expect(versionResult.stdout).toMatch(/1\.0\.0/);

    // Test with explicit configure command
    const configureResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs'), 'configure'],
      inputs: ['Command Mode User'],
      timeout: 5000,
      debug: false
    });

    // Verify the command ran successfully
    expect(configureResult.code).toBe(0);
    expect(configureResult.stdout).toContain('What is your name?');
    expect(configureResult.stdout).toContain('Hello, Command Mode User!');
  });

  // Test interactive prompt handling
  test('Interactive prompts handle various inputs correctly', async () => {
    // Test with default value
    const defaultInputs = [
      'configure',
      ''  // Empty input should use default value
    ];

    const defaultResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs')],
      inputs: defaultInputs,
      timeout: 5000,
      debug: false
    });

    // Verify default value was used
    expect(defaultResult.stdout).toContain('Hello, world!');

    // Test with custom input
    const customInputs = [
      'configure',
      'Custom Input'
    ];

    const customResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs')],
      inputs: customInputs,
      timeout: 5000,
      debug: false
    });

    // Verify custom input was used
    expect(customResult.stdout).toContain('Hello, Custom Input!');
  });

  // Test error handling
  test('Error handling works correctly', async () => {
    // Test with invalid command
    const invalidResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs'), 'invalid-command'],
      inputs: [],
      timeout: 5000,
      debug: false
    });

    // Verify error message appears somewhere in stdout or stderr
    const output = invalidResult.stderr + invalidResult.stdout;
    expect(
      output.toLowerCase().includes('error') ||
      output.toLowerCase().includes('unknown') ||
      output.toLowerCase().includes('invalid')
    ).toBe(true);

    // Test with invalid menu option
    const invalidMenuInputs = [
      'not-a-real-command',  // Invalid menu option
      ''                     // Press Enter to exit
    ];

    const invalidMenuResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs')],
      inputs: invalidMenuInputs,
      timeout: 5000,
      debug: false
    });

    // Check for error message about unknown command
    expect(invalidMenuResult.stdout).toContain('Unknown command');
    expect(invalidMenuResult.stdout).toContain('Try "configure" instead');
  });

  // Test help output
  test('Help command displays correct information', async () => {
    const helpResult = await testCLITiming({
      command: 'node',
      args: [path.join(rootDir, 'index.mjs'), '--help'],
      inputs: [],
      timeout: 5000,
      debug: false
    });

    // Check help output contains expected content
    expect(helpResult.stdout).toContain('Usage:');
    expect(helpResult.stdout).toContain('Options:');
    expect(helpResult.stdout).toContain('Commands:');
    expect(helpResult.stdout).toContain('configure');
    expect(helpResult.stdout).toContain('{{description}}');
  });
});
